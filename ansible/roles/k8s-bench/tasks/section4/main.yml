- name: 4.1.1 Ensure that the kubelet service file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.1 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.1","task_description":"Ensure that the kubelet service file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/systemd/system/kubelet.service.d/10-kubeadm.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 4.1.1 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.1","task_description":"Ensure that the kubelet service file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/systemd/system/kubelet.service.d/10-kubeadm.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 4.1.2 Ensure that the kubelet service file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.2 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.2","task_description":"Ensure that the kubelet service file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/systemd/system/kubelet.service.d/10-kubeadm.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 4.1.2 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.2","task_description":"Ensure that the kubelet service file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/systemd/system/kubelet.service.d/10-kubeadm.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 4.1.3 If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: ps -ef | grep kube-proxy | grep -oE "\-\-kubeconfig=[^ ]+" | awk -F= '{print $2}' | xargs stat -c %a || echo "kubeconfig file not exists"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.3 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.3","task_description":"If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"kubeconfig file not exists","script":"" }] }}'
      when: result.stdout == '600' or result.stdout == 'kubeconfig file not exists'
    - name: Add task 4.1.3 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.3","task_description":"If proxy kubeconfig file exists ensure permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600' and result.stdout != 'kubeconfig file not exists'
- name: 4.1.4 If proxy kubeconfig file exists ensure ownership is set to root:root
  block:
    - ansible.builtin.shell: ps -ef | grep kube-proxy | grep -oE "\-\-kubeconfig=[^ ]+" | awk -F= '{print $2}' | xargs stat -c %U:%G || echo "kubeconfig file not exists"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.4 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.4","task_description":"If proxy kubeconfig file exists ensure ownership is set to root:root","task_status":"PASSED","configuration":"kubeconfig file not exists","script":"" }] }}'
      when: result.stdout == 'root:root' or result.stdout == 'kubeconfig file not exists'
    - name: Add task 4.1.4 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.4","task_description":"If proxy kubeconfig file exists ensure ownership is set to root:root","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root' and result.stdout != 'kubeconfig file not exists'
- name: 4.1.5 Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/kubelet.conf
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.5 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.5","task_description":"Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/kubelet.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 4.1.5 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.5","task_description":"Ensure that the --kubeconfig kubelet.conf file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/kubelet.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 4.1.6 Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/kubelet.conf
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.6 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.6","task_description":"Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/kubelet.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 4.1.6 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.6","task_description":"Ensure that the --kubeconfig kubelet.conf file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/kubelet.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 4.1.7 Ensure that the certificate authorities file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -oE 'clientCAFile:.*\.crt' | awk -F'[ ]' '{print $2}' | xargs stat -c %a || exit 0
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.7 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.7","task_description":"Ensure that the certificate authorities file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"clientCAFile: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 4.1.7 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.7","task_description":"Ensure that the certificate authorities file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"clientCAFile: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 4.1.8 Ensure that the client certificate authorities file ownership is set to root:root
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -oE 'clientCAFile:.*\.crt' | awk -F'[ ]' '{print $2}' | xargs stat -c %U:%G || exit 0
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.8 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.8","task_description":"Ensure that the client certificate authorities file ownership is set to root:root","task_status":"PASSED","configuration":"clientCAFile: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 4.1.8 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.8","task_description":"Ensure that the client certificate authorities file ownership is set to root:root","task_status":"FAILED","configuration":"clientCAFile: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 4.1.9 If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /var/lib/kubelet/config.yaml
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.9 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.9","task_description":"If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive","task_status":"PASSED","configuration":"/var/lib/kubelet/config.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 4.1.9 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.9","task_description":"If the kubelet config.yaml configuration file is being used validate permissions set to 600 or more restrictive","task_status":"FAILED","configuration":"/var/lib/kubelet/config.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 4.1.10 If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /var/lib/kubelet/config.yaml
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.1.10 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.10","task_description":"If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root","task_status":"PASSED","configuration":"/var/lib/kubelet/config.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 4.1.10 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.1.10","task_description":"If the kubelet config.yaml configuration file is being used validate file ownership is set to root:root","task_status":"FAILED","configuration":"/var/lib/kubelet/config.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 4.2.1 Ensure that the --anonymous-auth argument is set to false
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -EA1 'anonymous' || exit 0
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.1 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.1","task_description":"Ensure that the --anonymous-auth argument is set to false","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'false' in result.stdout"
    - name: Add task 4.2.1 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.1","task_description":"Ensure that the --anonymous-auth argument is set to false","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'false' not in result.stdout"
- name: 4.2.2 Ensure that the --authorization-mode argument is not set to AlwaysAllow
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -EA1 'authorization' || exit 0
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.2 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.2","task_description":"Ensure that the --authorization-mode argument is not set to AlwaysAllow","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'AlwaysAllow' not in result.stdout"
    - name: Add task 4.2.2 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.2","task_description":"Ensure that the --authorization-mode argument is not set to AlwaysAllow","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'AlwaysAllow' in result.stdout"
- name: 4.2.3 Ensure that the --client-ca-file argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -oE 'clientCAFile.*\.crt' || exit 0
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.3 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.3","task_description":"Ensure that the --client-ca-file argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != ''
    - name: Add task 4.2.3 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.3","task_description":"Ensure that the --client-ca-file argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == ''
- name: 4.2.4 Verify that the --read-only-port argument is set to 0
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'readOnlyPort'| grep -oE [0-9]+ || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.4 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.4","task_description":"Verify that the --read-only-port argument is set to 0","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == '0'
    - name: Add task 4.2.4 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.4","task_description":"Verify that the --read-only-port argument is set to 0","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '0'
- name: 4.2.5 Ensure that the --streaming-connection-idle-timeout argument is not set to 0
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'streamingConnectionIdleTimeout'| grep -oE [0-9]+ || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.5 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.5","task_description":"Ensure that the --streaming-connection-idle-timeout argument is not set to 0","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != "0" and result.stdout != "Argument is not set"
    - name: Add task 4.2.5 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.5","task_description":"Ensure that the --streaming-connection-idle-timeout argument is not set to 0","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == "0" or result.stdout == "Argument is not set"
- name: 4.2.6 Ensure that the --protect-kernel-defaults argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'protectKernelDefaults' || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.6 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.6","task_description":"Ensure that the --protect-kernel-defaults argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 4.2.6 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.6","task_description":"Ensure that the --protect-kernel-defaults argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 4.2.7 Ensure that the --make-iptables-util-chains argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'makeIPTablesUtilChains' || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.7 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.7","task_description":"Ensure that the --make-iptables-util-chains argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 4.2.7 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.7","task_description":"Ensure that the --make-iptables-util-chains argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 4.2.8 Ensure that the --hostname-override argument is not set
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-hostname\-override=[^ ]+" || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.8 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.8","task_description":"Ensure that the --hostname-override argument is not set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'Argument is not set'
    - name: Add task 4.2.8 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.8","task_description":"Ensure that the --hostname-override argument is not set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'Argument is not set'
- name: 4.2.9 Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'eventRecordQPS' || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.9 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.9","task_description":"Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != "Argument is not set"
    - name: Add task 4.2.9 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.9","task_description":"Ensure that the --event-qps argument is set to 0 or a level which ensures appropriate event capture","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == "Argument is not set"
- name: 4.2.10 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-kubeconfig=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -oE "client\-.*" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 4.2.10 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.10","task_description":"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 4.2.10 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.10","task_description":"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 4.2.11 Ensure that the --rotate-certificates argument is not set to false
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -E 'rotateCertificates' || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.11 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.11","task_description":"Ensure that the --rotate-certificates argument is not set to false","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 4.2.11 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.11","task_description":"Ensure that the --rotate-certificates argument is not set to false","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 4.2.12 Verify that the RotateKubeletServerCertificate argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-feature\-gates=RotateKubeletServerCertificate=[^ ]+" || echo "Argument is not set"
      register: result
      changed_when: false
      ignore_errors: yes
    - name: Add task 4.2.12 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.12","task_description":"Verify that the RotateKubeletServerCertificate argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 4.2.12 to failed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.12","task_description":"Verify that the RotateKubeletServerCertificate argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 4.2.13 Ensure that the Kubelet only makes use of Strong Cryptographic Ciphers
  block:
    - ansible.builtin.shell: ps -ef | grep kubelet | grep -oE "\-\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -oE "tlsCipherSuites[^\n]+" | grep -E "(TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_256_GCM_SHA384|TLS_RSA_WITH_AES_128_GCM_SHA256)" || echo "Argument is not set or not appropriately configured"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 4.2.13 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.13","task_description":"Ensure that the API Server only makes use of Strong Cryptographic Ciphers","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set or not appropriately configured'
    - name: Add task 4.2.13 to passed list
      set_fact:
        section4_tasks: '{{ section4_tasks + [{ "task_number":"4.2.13","task_description":"Ensure that the API Server only makes use of Strong Cryptographic Ciphers","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set or not appropriately configured'
- name: Count Section 4 passed tasks
  set_fact:
    worker_passed_tasks_count: '{{ worker_passed_tasks_count | int + 1 }}'
  loop: "{{ section4_tasks | flatten(levels=1) }}"
  when: item.task_status == "PASSED"