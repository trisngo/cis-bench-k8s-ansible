- name: 2.1 Ensure that the --cert-file and --key-file arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-(cert|key)\-file=[^ ]+" || exit 0
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.1 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.1","task_description":"Ensure that the --cert-file and --key-file arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 2.1 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.1","task_description":"Ensure that the --cert-file and --key-file arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 2.2 Ensure that the --client-cert-auth argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-client\-cert\-auth=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.2 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.2","task_description":"Ensure that the --client-cert-auth argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 2.2 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.2","task_description":"Ensure that the --client-cert-auth argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 2.3 Ensure that the --auto-tls argument is not set to true
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-auto\-tls=[^ ]+" || echo "Argument is not set to true"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.3 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.3","task_description":"Ensure that the --auto-tls argument is not set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' not in result.stdout"
    - name: Add task 2.3 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.3","task_description":"Ensure that the --auto-tls argument is not set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' in result.stdout and result.stdout != 'Argument is not set to true'"
- name: 2.4 Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-peer\-(cert|key)\-file=[^ ]+" || exit 0
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.4 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.4","task_description":"Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 2.4 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.4","task_description":"Ensure that the --peer-cert-file and --peer-key-file arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 2.5 Ensure that the --peer-client-cert-auth argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-peer\-client\-cert\-auth=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.5 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.5","task_description":"Ensure that the --peer-client-cert-auth argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 2.5 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.5","task_description":"Ensure that the --peer-client-cert-auth argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 2.6 Ensure that the --peer-auto-tls argument is not set to true
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-peer\-auto\-tls=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.6 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.6","task_description":"Ensure that the --peer-auto-tls argument is not set to true","task_status":"PASSED","configuration":"Argument is not set to true","script":"" }] }}'
      when: "'false' in result.stdout or result.stdout == 'Argument is not set'"
    - name: Add task 2.6 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.6","task_description":"Ensure that the --peer-auto-tls argument is not set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'false' not in result.stdout and result.stdout != 'Argument is not set'"
- name: 2.7 Ensure that a unique Certificate Authority is used for etcd
  block:
    - ansible.builtin.shell: ps -ef | grep etcd | grep -oE "\-\-trusted\-ca\-file=[^ ]+" | awk -F= '{print $2}' || exit 0
      register: file1
      ignore_errors: yes
      changed_when: false
    - ansible.builtin.shell: ps -ef | grep apiserver | grep -oE "\-\-client\-ca\-file=[^ ]+" | awk -F= '{print $2}' || exit 0
      register: file2
      ignore_errors: yes
      changed_when: false
    - name: Add task 2.7 to passed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.7","task_description":"Ensure that a unique Certificate Authority is used for etcd","task_status":"PASSED","configuration":file1.stdout + " - " + file2.stdout ,"script":"" }] }}'
      when: file1.stdout != '' and file2.stdout != '' and file1.stdout != file2.stdout
    - name: Add task 2.7 to failed list
      set_fact:
        section2_tasks: '{{ section2_tasks + [{ "task_number":"2.7","task_description":"Ensure that a unique Certificate Authority is used for etcd","task_status":"FAILED","configuration":"Unique Certificate Authority is not used for etcd","script":"Fix it" }] }}'
      when:
        - file1.stdout == '' or file2.stdout == ''
        - file1.stdout != '' and file2.stdout != '' and file1.stdout == file2.stdout
- name: Count Section 2 passed tasks
  set_fact:
    master_passed_tasks_count: '{{ master_passed_tasks_count | int + 1 }}'
  loop: "{{ section2_tasks | flatten(levels=1) }}"
  when: item.task_status == "PASSED"