---

- name: 1.1.1 Ensure that the API server pod specification file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/manifests/kube-apiserver.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.1 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.1","task_description":"Ensure that the API server pod specification file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-apiserver.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.1 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.1","task_description":"Ensure that the API server pod specification file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-apiserver.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.2 Ensure that the API server pod specification file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/manifests/kube-apiserver.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.2","task_description":"Ensure that the API server pod specification file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-apiserver.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.2 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.2","task_description":"Ensure that the API server pod specification file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-apiserver.yaml: "+ result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.3 Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/manifests/kube-controller-manager.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.3 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.3","task_description":"Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-controller-manager.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.3 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.3","task_description":"Ensure that the controller manager pod specification file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-controller-manager.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.4 Ensure that the controller manager pod specification file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/manifests/kube-controller-manager.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.4 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.4","task_description":"Ensure that the controller manager pod specification file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-controller-manager.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.4 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.4","task_description":"Ensure that the controller manager pod specification file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-controller-manager.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.5 Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/manifests/kube-scheduler.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.5 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.5","task_description":"Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-scheduler.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.5 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.5","task_description":"Ensure that the scheduler pod specification file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-scheduler.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.6 Ensure that the scheduler pod specification file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/manifests/kube-scheduler.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.6 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.6","task_description":"Ensure that the scheduler pod specification file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/kube-scheduler.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.6 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.6","task_description":"Ensure that the scheduler pod specification file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/kube-scheduler.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.7 Ensure that the etcd pod specification file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/manifests/etcd.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.7 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.7","task_description":"Ensure that the etcd pod specification file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/etcd.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.7 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.7","task_description":"Ensure that the etcd pod specification file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/etcd.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.8 Ensure that the etcd pod specification file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/manifests/etcd.yaml
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.8 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.8","task_description":"Ensure that the etcd pod specification file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/manifests/etcd.yaml: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.8 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.8","task_description":"Ensure that the etcd pod specification file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/manifests/etcd.yaml: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.9 Ensure that the Container Network Interface file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: (stat -c %a /etc/cni/net.d/* | grep -vq "600" &&  stat -c %n:%a /etc/cni/net.d/*) || echo "All files permission is 600"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.9 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.9","task_description":"Ensure that the Container Network Interface file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'All files permission is 600'
    - name: Add task 1.1.9 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.9","task_description":"Ensure that the Container Network Interface file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'All files permission is 600'
- name: 1.1.10 Ensure that the Container Network Interface file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/cni/net.d/* | grep -v "root:root" || exit 0
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.10 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.10","task_description":"Ensure that the Container Network Interface file ownership is set to root:root","task_status":"PASSED","configuration":"All files ownership is root:root","script":"" }] }}'
      when: result.stdout == ''
    - name: Add task 1.1.10 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.10","task_description":"Ensure that the Container Network Interface file ownership is set to root:root","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != ''
- name: 1.1.11 Ensure that the etcd data directory permissions are set to 700 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /var/lib/minikube/etcd
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.11 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.11","task_description":"Ensure that the etcd data directory permissions are set to 700 or more restrictive","task_status":"PASSED","configuration":"/var/lib/minikube/etcd: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '700'
    - name: Add task 1.1.11 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.11","task_description":"Ensure that the etcd data directory permissions are set to 700 or more restrictive","task_status":"FAILED","configuration":"/var/lib/minikube/etcd: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '700'
- name: 1.1.13 Ensure that the admin.conf file permissions are set to 600
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/admin.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.13 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.13","task_description":"Ensure that the admin.conf file permissions are set to 600","task_status":"PASSED","configuration":"/etc/kubernetes/admin.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.13 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.13","task_description":"Ensure that the admin.conf file permissions are set to 600","task_status":"FAILED","configuration":"/etc/kubernetes/admin.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.14 Ensure that the admin.conf file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/admin.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.14 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.14","task_description":"Ensure that the admin.conf file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/admin.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.14 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.14","task_description":"Ensure that the admin.conf file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/admin.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.15 Ensure that the scheduler.conf file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/scheduler.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.15 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.15","task_description":"Ensure that the scheduler.conf file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/scheduler.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.15 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.15","task_description":"Ensure that the scheduler.conf file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/scheduler.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.16 Ensure that the scheduler.conf file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/scheduler.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.16 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.16","task_description":"Ensure that the scheduler.conf file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/scheduler.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.16 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.16","task_description":"Ensure that the scheduler.conf file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/scheduler.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.17 Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: stat -c %a /etc/kubernetes/controller-manager.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.17 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.17","task_description":"Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":"/etc/kubernetes/controller-manager.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == '600'
    - name: Add task 1.1.17 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.17","task_description":"Ensure that the controller-manager.conf file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":"/etc/kubernetes/controller-manager.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != '600'
- name: 1.1.18 Ensure that the controller-manager.conf file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /etc/kubernetes/controller-manager.conf
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.18 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.18","task_description":"Ensure that the controller-manager.conf file ownership is set to root:root","task_status":"PASSED","configuration":"/etc/kubernetes/controller-manager.conf: " + result.stdout,"script":"" }] }}'
      when: result.stdout == 'root:root'
    - name: Add task 1.1.18 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.18","task_description":"Ensure that the controller-manager.conf file ownership is set to root:root","task_status":"FAILED","configuration":"/etc/kubernetes/controller-manager.conf: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'root:root'
- name: 1.1.19 Ensure that the Kubernetes PKI directory and file ownership is set to root:root
  block:
    - ansible.builtin.shell: stat -c %U:%G /var/lib/minikube/certs/ | grep -v "root:root" || exit 0
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.19 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.19","task_description":"Ensure that the Kubernetes PKI directory and file ownership is set to root:root","task_status":"PASSED","configuration":"/var/lib/minikube/certs/: root:root","script":"" }] }}'
      when: result.stdout == ''
    - name: Add task 1.1.19 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.19","task_description":"Ensure that the Kubernetes PKI directory and file ownership is set to root:root","task_status":"FAILED","configuration":"/var/lib/minikube/certs/: " + result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != ''
- name: 1.1.20 Ensure that the Container Network Interface file permissions are set to 600 or more restrictive
  block:
    - ansible.builtin.shell: (stat -c %a /var/lib/minikube/certs/*.crt | grep -vq "600" &&  stat -c %n:%a /var/lib/minikube/certs/*.crt) || echo "All files permission is 600"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.20 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.20","task_description":"Ensure that the Container Network Interface file permissions are set to 600 or more restrictive","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'All files permission is 600'
    - name: Add task 1.1.20 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.20","task_description":"Ensure that the Container Network Interface file permissions are set to 600 or more restrictive","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'All files permission is 600'
- name: 1.1.21 Ensure that the Kubernetes PKI key file permissions are set to 600
  block:
    - ansible.builtin.shell: (stat -c %a /var/lib/minikube/certs/*.key | grep -vq "600" &&  stat -c %n:%a /var/lib/minikube/certs/*.key) || echo "All files permission is 600"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.1.21 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.21","task_description":"Ensure that the Kubernetes PKI key file permissions are set to 600","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'All files permission is 600'
    - name: Add task 1.1.21 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.1.21","task_description":"Ensure that the Kubernetes PKI key file permissions are set to 600","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'All files permission is 600'
- name: 1.2.2 Ensure that the --token-auth-file parameter is not set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-token\-auth\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.2","task_description":"Ensure that the --token-auth-file parameter is not set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'Argument is not set'
    - name: Add task 1.2.2 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.2","task_description":"Ensure that the --token-auth-file parameter is not set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'Argument is not set'
- name: 1.2.3 Ensure that the --DenyServiceExternalIPs is not set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep "\-\-DenyServiceExternalIPs" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.3","task_description":"Ensure that the --DenyServiceExternalIPs is not set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == 'Argument is not set'
    - name: Add task 1.2.3 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.3","task_description":"Ensure that the --DenyServiceExternalIPs is not set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout != 'Argument is not set'
- name: 1.2.4 Ensure that the --kubelet-client-certificate and --kubeletclient-key arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-kubelet\-client\-(key|certificate)=[^ ]+"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.4 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.4","task_description":"Ensure that the --kubelet-client-certificate and --kubeletclient-key arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 1.2.4 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.4","task_description":"Ensure that the --kubelet-client-certificate and --kubeletclient-key arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 1.2.5 Ensure that the --kubelet-certificate-authority argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-kubelet\-certificate\-authority=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.5 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.5","task_description":"Ensure that the --kubelet-certificate-authority argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.5 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.5","task_description":"Ensure that the --kubelet-certificate-authority argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.6 Ensure that the --authorization-mode argument is not set to AlwaysAllow
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-authorization\-mode=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.6 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.6","task_description":"Ensure that the --authorization-mode argument is not set to AlwaysAllow","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'AlwaysAllow' not in result.stdout"
    - name: Add task 1.2.6 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.6","task_description":"Ensure that the --authorization-mode argument is not set to AlwaysAllow","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'AlwaysAllow' in result.stdout"
- name: 1.2.7 Ensure that the --authorization-mode argument includes Node
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-authorization\-mode=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.7 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.7","task_description":"Ensure that the --authorization-mode argument includes Node","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'Node' in result.stdout"
    - name: Add task 1.2.7 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.7","task_description":"Ensure that the --authorization-mode argument includes Node","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'Node' not in result.stdout"
- name: 1.2.8 Ensure that the --authorization-mode argument includes RBAC
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-authorization\-mode=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.8 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.8","task_description":"Ensure that the --authorization-mode argument includes RBAC","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'RBAC' in result.stdout"
    - name: Add task 1.2.8 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.8","task_description":"Ensure that the --authorization-mode argument includes RBAC","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'RBAC' not in result.stdout"
- name: 1.2.9 Ensure that the admission control plugin EventRateLimit is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-enable\-admission\-plugins=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.9 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.9","task_description":"Ensure that the admission control plugin EventRateLimit is set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'EventRateLimit' in result.stdout"
    - name: Add task 1.2.9 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.9","task_description":"Ensure that the admission control plugin EventRateLimit is set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'EventRateLimit' not in result.stdout"
- name: 1.2.10 Ensure that the admission control plugin AlwaysAdmit is not set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-enable\-admission\-plugins=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.10 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.10","task_description":"Ensure that the admission control plugin AlwaysAdmit is not set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'AlwaysAdmit' not in result.stdout"
    - name: Add task 1.2.10 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.10","task_description":"Ensure that the admission control plugin AlwaysAdmit is not set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'AlwaysAdmit' in result.stdout"
- name: 1.2.11 Ensure that the admission control plugin AlwaysPullImages is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-enable\-admission\-plugins=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.11 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.11","task_description":"Ensure that the admission control plugin AlwaysPullImages","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'AlwaysPullImages' in result.stdout"
    - name: Add task 1.2.11 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.11","task_description":"Ensure that the admission control plugin AlwaysPullImages","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'AlwaysPullImages' not in result.stdout"
- name: 1.2.12 Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-enable\-admission\-plugins=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.12 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.12","task_description":"Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'SecurityContextDeny' in result.stdout"
    - name: Add task 1.2.12 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.12","task_description":"Ensure that the admission control plugin SecurityContextDeny is set if PodSecurityPolicy is not used","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'SecurityContextDeny' not in result.stdout"
- name: 1.2.13 Ensure that the admission control plugin ServiceAccount is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-disable\-admission\-plugins=[^ ]+" || echo "Argument is set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.13 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.13","task_description":"Ensure that the admission control plugin ServiceAccount is set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'ServiceAccount' not in result.stdout"
    - name: Add task 1.2.13 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.13","task_description":"Ensure that the admission control plugin ServiceAccount is set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'ServiceAccount' in result.stdout"
- name: 1.2.14 Ensure that the admission control plugin NamespaceLifecycle is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-disable\-admission\-plugins=[^ ]+" || echo "Argument is set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.14 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.14","task_description":"Ensure that the admission control plugin NamespaceLifecycle is set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'NamespaceLifecycle' not in result.stdout"
    - name: Add task 1.2.14 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.14","task_description":"Ensure that the admission control plugin NamespaceLifecycle is set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'NamespaceLifecycle' in result.stdout"
- name: 1.2.15 Ensure that the admission control plugin NodeRestriction is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-enable\-admission\-plugins=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.15 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.15","task_description":"Ensure that the admission control plugin NodeRestriction is set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'NodeRestriction' in result.stdout"
    - name: Add task 1.2.15 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.15","task_description":"Ensure that the admission control plugin NodeRestriction is set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'NodeRestriction' not in result.stdout"
- name: 1.2.16 Ensure that the --secure-port argument is not set to 0
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-secure\-port=[^ ]+"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.16 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.16","task_description":"Ensure that the --secure-port argument is not set to 0","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout == '' or result.stdout != '--secure-port=0'
    - name: Add task 1.2.16 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.16","task_description":"Ensure that the --secure-port argument is not set to 0","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == '--secure-port=0'
- name: 1.2.17 Ensure that the --profiling argument is set to false
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-profiling=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.17 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.17","task_description":"Ensure that the --profiling argument is set to false","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'false' in result.stdout"
    - name: Add task 1.2.17 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.17","task_description":"Ensure that the --profiling argument is set to false","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'false' not in result.stdout"
- name: 1.2.18 Ensure that the --audit-log-path argument is set
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-audit\-log\-path=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.18 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.18","task_description":"Ensure that the --audit-log-path argument is set","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.8 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.18","task_description":"Ensure that the --audit-log-path argument is set","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.19 Ensure that the --audit-log-maxage argument is set to 30 or as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-audit\-log\-maxage=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.19 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.19","task_description":"Ensure that the --audit-log-maxage argument is set to 30 or as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.19 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.19","task_description":"Ensure that the --audit-log-maxage argument is set to 30 or as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.20 Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-audit\-log\-maxbackup=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.20 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.20","task_description":"Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.20 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.20","task_description":"Ensure that the --audit-log-maxbackup argument is set to 10 or as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.21 Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-audit\-log-maxsize=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.21 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.21","task_description":"Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.21 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.21","task_description":"Ensure that the --audit-log-maxsize argument is set to 100 or as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.22 Ensure that the --request-timeout argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-request\-timeout=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: AAdd task 1.2.22 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.22","task_description":"Ensure that the --request-timeout argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.22 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.22","task_description":"Ensure that the --request-timeout argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.23 Ensure that the --service-account-lookup argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-service\-account\-lookup=[^ ]+" ||  echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.23 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.23","task_description":"Ensure that the --service-account-lookup argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 1.2.23 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.23","task_description":"Ensure that the --service-account-lookup argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 1.2.24 Ensure that the --service-account-key-file argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-service\-account\-key\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.24 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.24","task_description":"Ensure that the --service-account-key-file argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.24 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.24","task_description":"Ensure that the --service-account-key-file argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.25 Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-etcd\-(cert|key)file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.25 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.25","task_description":"Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 1.2.25 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.25","task_description":"Ensure that the --etcd-certfile and --etcd-keyfile arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 1.2.26 Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE " \-\-tls\-(cert|private\-key)\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.26 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.26","task_description":"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout_lines|length == 2
    - name: Add task 1.2.26 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.26","task_description":"Ensure that the --tls-cert-file and --tls-private-key-file arguments are set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout_lines|length < 2
- name: 1.2.27 Ensure that the --client-ca-file argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE " \-\-client\-ca\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.27 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.27","task_description":"Ensure that the --client-ca-file argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.27 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.27","task_description":"Ensure that the --client-ca-file argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.28 Ensure that the --etcd-cafile argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-etcd\-cafile=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.28 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.28","task_description":"Ensure that the --etcd-cafile argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.28 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.28","task_description":"Ensure that the --etcd-cafile argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.29 Ensure that the --encryption-provider-config argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-encryption\-provider\-config=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.29 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.29","task_description":"Ensure that the --encryption-provider-config argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.2.29 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.29","task_description":"Ensure that the --encryption-provider-config argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.2.30 Ensure that encryption providers are appropriately configured
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-encryption\-provider\-config=[^ ]+" | awk -F= '{print $2}' | xargs cat | grep -A3 -oE "(aescbc|kms|secretbox)" || echo "Argument is not set or not appropriately configured"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.30 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.30","task_description":"Ensure that encryption providers are appropriately configured","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set or not appropriately configured'
    - name: Add task 1.2.30 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.30","task_description":"Ensure that encryption providers are appropriately configured","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set or not appropriately configured'
- name: 1.2.31 Ensure that the API Server only makes use of Strong Cryptographic Ciphers
  block:
    - ansible.builtin.shell: ps -ef | grep kube-apiserver | grep -oE "\-\-tls\-cipher\-suites=[^ ]+" | grep -E "(TLS_AES_128_GCM_SHA256|TLS_AES_256_GCM_SHA384|TLS_CHACHA20_POLY1305_SHA256|TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA|TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA|TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256|TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA|TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA|TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256|TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA|TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305|TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256|TLS_RSA_WITH_3DES_EDE_CBC_SHA|TLS_RSA_WITH_AES_128_CBC_SHA|TLS_RSA_WITH_AES_128_GCM_SHA256|TLS_RSA_WITH_AES_256_CBC_SHA|TLS_RSA_WITH_AES_256_GCM_SHA384)" || echo "Argument is not set or not appropriately configured"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.2.31 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.31","task_description":"Ensure that the API Server only makes use of Strong Cryptographic Ciphers","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set or not appropriately configured'
    - name: Add task 1.2.31 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.2.31","task_description":"Ensure that the API Server only makes use of Strong Cryptographic Ciphers","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set or not appropriately configured'
- name: 1.3.1 Ensure that the --terminated-pod-gc-threshold argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-terminated\-pod\-gc\-threshold=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.1 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.1","task_description":"Ensure that the --terminated-pod-gc-threshold argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.3.1 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.1","task_description":"Ensure that the --terminated-pod-gc-threshold argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.3.2 Ensure that the --profiling argument is set to false
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-profiling=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.2","task_description":"Ensure that the --profiling argument is set to false","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'false' in result.stdout"
    - name: Add task 1.3.2 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.2","task_description":"Ensure that the --profiling argument is set to false","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'false' not in result.stdout"
- name: 1.3.3 Ensure that the --use-service-account-credentials argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-use-service\-account\-credentials=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.3 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.3","task_description":"Ensure that the --use-service-account-credentials argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'true' in result.stdout"
    - name: Add task 1.3.3 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.3","task_description":"Ensure that the --use-service-account-credentials argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'true' not in result.stdout"
- name: 1.3.4 Ensure that the --service-account-private-key-file argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-service\-account\-private\-key\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.4 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.4","task_description":"Ensure that the --service-account-private-key-file argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.3.4 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.4","task_description":"Ensure that the --service-account-private-key-file argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.3.5 Ensure that the --root-ca-file argument is set as appropriate
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-root\-ca\-file=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.5 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.5","task_description":"Ensure that the --root-ca-file argument is set as appropriate","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.3.5 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.5","task_description":"Ensure that the --root-ca-file argument is set as appropriate","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.3.6 Ensure that the RotateKubeletServerCertificate argument is set to true
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -o "\-\-feature\-gates=RotateKubeletServerCertificate=true" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.6 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.6","task_description":"Ensure that the RotateKubeletServerCertificate argument is set to true","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: result.stdout != 'Argument is not set'
    - name: Add task 1.3.6 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.6","task_description":"Ensure that the RotateKubeletServerCertificate argument is set to true","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: result.stdout == 'Argument is not set'
- name: 1.3.7 Ensure that the --bind-address argument is set to 127.0.0.1
  block:
    - ansible.builtin.shell: ps -ef | grep kube-controller-manager | grep -oE "\-\-bind\-address=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.3.7 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.7","task_description":"Ensure that the --bind-address argument is set to 127.0.0.1","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'127.0.0.1' in result.stdout"
    - name: Add task 1.3.7 to failed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.3.7","task_description":"Ensure that the --bind-address argument is set to 127.0.0.1","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'127.0.0.1' not in result.stdout"
- name: 1.4.1 Ensure that the --profiling argument is set to false
  block:
    - ansible.builtin.shell: ps -ef | grep kube-scheduler | grep -oE "\-\-profiling=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.4.1 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.4.1","task_description":"Ensure that the --profiling argument is set to false","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'false' in result.stdout"
    - name: Add task 1.4.1 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.4.1","task_description":"Ensure that the --profiling argument is set to false","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'false' not in result.stdout"
- name: 1.4.2 Ensure that the --bind-address argument is set to 127.0.0.1
  block:
    - ansible.builtin.shell: ps -ef | grep kube-scheduler | grep -oE "\-\-bind\-address=[^ ]+" || echo "Argument is not set"
      register: result
      ignore_errors: yes
      changed_when: false
    - name: Add task 1.4.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.4.2","task_description":"Ensure that the --bind-address argument is set to 127.0.0.1","task_status":"PASSED","configuration":result.stdout,"script":"" }] }}'
      when: "'127.0.0.1' in result.stdout"
    - name: Add task 1.4.2 to passed list
      set_fact:
        section1_tasks: '{{ section1_tasks + [{ "task_number":"1.4.2","task_description":"Ensure that the --bind-address argument is set to 127.0.0.1","task_status":"FAILED","configuration":result.stdout,"script":"Fix it" }] }}'
      when: "'127.0.0.1' not in result.stdout"
- name: Count Section 1 passed tasks
  set_fact:
    master_passed_tasks_count: '{{ master_passed_tasks_count | int + 1 }}'
  loop: "{{ section1_tasks | flatten(levels=1) }}"
  when: item.task_status == "PASSED"