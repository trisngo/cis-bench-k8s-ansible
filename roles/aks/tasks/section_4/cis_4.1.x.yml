- name: "4.1.1 | Ensure that the cluster-admin role is only used where required (Manual)"
  block:
      - shell: "kubectl get clusterrolebindings -o=custom-columns=NAME:.metadata.name,ROLE:.roleRef.name,SUBJECT:.subjects[*].name | grep cluster-admin | awk 'BEGIN { ORS=\" \" }; {print NR \".\"$1}'"
        register: result411

      - debug:
          msg: "4.1.1 | NOT SCORED | Ensure that the cluster-admin role is only used where required (Manual).\n- Found: {{ result411.stdout | default(0) }}"
      - lineinfile:
          line: "4.1.1 | NOT SCORED | Ensure that the cluster-admin role is only used where required (Manual).\n- Found: {{ result411.stdout | default(0) }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1
  when:
      - akscis_rule_4_1_1
  tags:
      - level
      - rule_4.1.1
      - audit
      - policy

- name: "4.1.2 | Minimize access to secrets (Manual)"
  block:
      - shell: "kubectl api-resources --sort-by name -o wide | grep secret | cut -d'[' -f 2 | sed 's/.$//'"
        register: result412

      - debug:
          msg: "4.1.2 | NOT SCORED | Minimize access to secrets (Manual).\n- Found: {{ result412.stdout | default(0) }}"
      - lineinfile:
          line: "4.1.2 | NOT SCORED | Minimize access to secrets (Manual).\n- Found: {{ result412.stdout | default(0) }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1

- name: "4.1.3 | Minimize wildcard use in Roles and ClusterRoles (Manual)"
  block:
      - shell: "kubectl get roles --all-namespaces -o yaml | grep -q '*' && echo 'Found wildcard in Roles'; kubectl get clusterroles -o yaml | grep -q '*' && echo 'Found wildcard in Cluster Roles'"
        register: result413

      - debug:
          msg: "4.1.3 | NOT SCORED | Minimize wildcard use in Roles and ClusterRoles (Manual).\n- {{ result413.stdout }}"
      - lineinfile:
          line: "4.1.3 | NOT SCORED | Minimize wildcard use in Roles and ClusterRoles (Manual).\n- {{ result413.stdout }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1

- name: "4.1.4 | Minimize access to create pods (Manual)"
  block:
      - shell: "kubectl api-resources --sort-by name -o wide | grep -w Pod | cut -d'[' -f 2 | sed 's/.$//'"
        register: result414

      - debug:
          msg: "4.1.4 | NOT SCORED | Minimize access to create pods (Manual).\n- Found: {{ result414.stdout | default(0) }}"
      - lineinfile:
          line: "4.1.4 | NOT SCORED | Minimize access to create pods (Manual).\n- Found: {{ result414.stdout | default(0) }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1

- name: "4.1.5 | Ensure that default service accounts are not actively used.(Manual)"
  block:
      - shell: "kubectl api-resources --sort-by name -o wide | grep -w Pod | cut -d'[' -f 2 | sed 's/.$//'"
        register: result415

      - debug:
          msg: "4.1.5 | NOT SCORED | Minimize access to create pods (Manual).\n- Found: {{ result415.stdout | default(0) }}"
      - lineinfile:
          line: "4.1.5 | NOT SCORED | Minimize access to create pods (Manual).\n- Found: {{ result415.stdout | default(0) }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1

- name: "4.1.6 | Ensure that Service Account Tokens are only mounted where necessary (Manual)"
  block:
      - shell: "kubectl get rolebindings,clusterrolebindings --all-namespaces  -o custom-columns='KIND:kind,NAMESPACE:metadata.namespace,NAME:metadata.name,SERVICE_ACCOUNTS:subjects[?(@.kind==\"ServiceAccount\")].name' | grep -q default || echo 'Not found any binding'; kubectl get serviceaccount default -o yaml | grep 'automountServiceAccountToken: false' || echo 'Not found automountServiceAccountToken: false'"
        register: result416

      - debug:
          msg: "4.1.6 | NOT SCORED | Ensure that Service Account Tokens are only mounted where necessary (Manual).\n- {{ result416.stdout }}"
      - lineinfile:
          line: "4.1.6 | NOT SCORED | Ensure that Service Account Tokens are only mounted where necessary (Manual).\n- {{ result416.stdout }}"
          insertafter: EOF
          dest: "{{ report_path }}"
          create: yes
        delegate_to: 127.0.0.1
  delegate_to: 127.0.0.1
